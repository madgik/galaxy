<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<tool version="1.0.0" name="HOLD OUT VALIDATION" id="HOLD_OUT_VALIDATION">
    <description>HOLD OUT VALIDATION</description>
        <command interpreter="python">HOLD_OUT_VALIDATION.py -p '$pathology' -d '$dataset' -x '$x' -y '$y' -tes '$test_size' -trs '$train_size' -rans '$random_state' -sh '$shuffle' -o '$output' </command>
    <inputs>
        <param type="text" name="dataset" label="Dataset" help="The names of one or more datasets, in which the algorithm will be executed."/>
        <param type="text" name="pathology" label="Pathology" help="The name of the pathology in which the dataset belongs to."/>
        <param type="text" name="x" label="X" help="Independent variables: A list of variables from the database."/>
        <param type="text" name="y" label="Y" help="Dependent variable: A variable from the database."/>
        <param type="text" name="test_size" label="(Optional) Test Size" help="(Real) If real, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If None, the value is set to the complement of the train size. If train_size is also None, it will be set to 0.25." optional="true" />
        <param type="text" name="train_size" label="(Optional) Train Size" help="(Real) If real, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If None, the value is automatically set to the complement of the test size." optional="true" />
        <param type="text" name="random_state" label="(Optional) Random State" help="(Integer) It is the seed used by the random number generator." optional="true" />
        <param type="text" name="shuffle" label="(Optional) Shuffle" help="(String) Whether or not to shuffle the data before splitting. It can be True,False or None." optional="true" />
    </inputs>
    <outputs>
        <data name="output" format="json" />
    </outputs>
	<help>
** Hold Out Validation **

This algorithm splits the dataset into random train and test subsets.


** Output **

This algorithm&apos;s output can be given as input to **NAIVE BAYES TRAINING**.


Output example:
{
&quot;numberOfSplits&quot;: &quot;1&quot;, 
&quot;dbIdentifier&quot;: &quot;HOLD_OUT_VALIDATION_1573040331747&quot;
}
	</help>
</tool>